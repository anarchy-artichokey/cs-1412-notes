#+title: 828notes

* Directives
"#include <stdio.h>"
- Only one line long. Statement will not carry over to other lines.

* Functions
- A series of statements that have been grouped together and given a name.
- Library functions are already given by the C designers.
- One can create their own functions.
- Functions sometimes return values.
  "return" statements, like "return 0;"
- "{}" note the beginning and end of functions.

* Main Function
- Mandatory
- Called automatically when program is ran.

* Statement
- Command to be exectued.
- Must end with a semicolon: ";".
- 2 types.
  1. Commands, single word, "return"
  2. Function calls, sometimes need arguments, "printf"

* Comments
- Not read by compiler, usually only for humans.
  "/* */": multiline comments
  "//": single line comments
- Code can be inside, but will not be read by compiler.

* Variables and Assignments
- Programming languages were originally created by mathematicians to compute complex math problems.
- Variable: something that can change value, a way to temporarily store data during program execution.
- "=" is the assignment operator. Not to be confused with "==", which is the equivalency operator.
- Types of Variables:
  1. int: integer
  2. char: character
  3. float: floating point, decimal
  4. double: floating point, more places
  5. long: integer, more places
- Variables MUST be declared before they are used.
  "int x = 10;"
  "char e = 'e';"
  "float f = 10.256f;" it is customary to add an "f" at the end of a floating point.
- Mixing types is legal, but not always safe.
  Will not show an error message. Nothing in the C standard forbids it.
  "int y = 10.567f;" is not illegal, but will by cast into "y = 10".

* Printing values
- "printf" - statements
  Format specifiers: tell what the format of the wariable is.
  #+begin_src C
    #include <stdio.h>

    int main() {

      int x;
      float f;
      char c;

      x = 90;
      printf("The value of x is %d\n", x);

      f = 12.67f;
      printf("The value of f is %f\n", f); //the value after "%" can be called a placeholder for the data held in the variable.

      x = 23.567f;
      printf("Despite being assigned a float, the value of x is %d\n", x);

      c = 'b';
      printf("The value of c is %c\n", c);

      return 0;

    }
  #+end_src

  #+RESULTS:
  | The     | value | of       | x | is     |    90 |       |    |   |    |    |
  | The     | value | of       | f | is     | 12.67 |       |    |   |    |    |
  | Despite | being | assigned | a | float, |   the | value | of | x | is | 23 |
  | The     | value | of       | c | is     |     b |       |    |   |    |    |

- It is not always safe to use a more limited data type because of data loss.
  Assigning a float to an integer data type will lose all the information after the decimal point.

* Variables and Literals
"int x = 10;"
variable: x
literal: 10
^ this is called hardcoding

* Reading Inputs
"scanf()"
int x;
scanf("%d", &x);
- Requires ampersand operator to store data.
- Requires being told what data type is being stored.
#+begin_src C
#include <stdio.h>

int main() {

  printf("Please give the value of x.\n");
  int x;
  scanf("%d", &x);
  printf("The value is %d", x);

  return 0;
}
#+end_src

#+RESULTS:
| Please | give  | the | value | of | x. |
| The    | value | is  | 32764 |    |    |

- Escape sequences:
  - \n: newline operator
